- hosts: localhost
  connection: local

  vars:
      plaintext: "{{ lookup('password', 'secrets/jenkins length=32')}}"

  tasks:
    - name: detect the git repo path
      shell: "git rev-parse --show-toplevel"
      register: repo_path
    - set_fact: repo_path="{{ repo_path.stdout }}"

    - name: generate a sha512 hash of the password
      shell: "python -c 'import passlib.hash; print passlib.hash.sha512_crypt.encrypt(\"{{plaintext}}\")'"
      register: password
    - set_fact: password="{{ password.stdout }}"

- hosts: jenkins-ci

  sudo: yes

  tasks:
    - name: create a jenkins group
      group: name=jenkins state=present

    - name: create a jenkins user
      user: name=jenkins
            shell=/bin/bash
            groups=jenkins
            createhome=yes
            state=present
            password='{{ hostvars["ansible_connection=local"].password }}'

    - name: set up default git configuration for the Jenkins user
      action: template src=templates/gitconfig dest="/home/jenkins/.gitconfig"

- hosts: jenkins-ci

  sudo: yes

  roles:
    - {role: './Stouts.nginx'}
    - {role: './Stouts.jenkins'}

  vars:
      nginx_servers:
      - |
        listen 0.0.0.0:80;
        server_name jenkins;
        location / { proxy_pass http://127.0.0.1:8080; }
      nginx_status: false
      nginx_delete_default_site: true

      jenkins_ssh_key_file: ""
      jenkins_http_host: 0.0.0.0
      jenkins_http_port: 8080
      jenkins_apt_packages:
        - git
        - python-dev
        - python-pip
        - python-m2crypto
      jenkins_plugins:
        - git
        - greenballs
      repo_path: '{{ hostvars["ansible_connection=local"].repo_path}}'

  tasks:

    - name: "install necessary Python packages"
      pip: name="{{ item }}" state=present
      with_items:
        - tox
        - jenkins-job-builder

    - name: "create a Jenkins directory for the default user"
      file: path="{{jenkins_home}}/users/jenkins" state=directory owner="jenkins" group="jenkins"

    - name: "create a directory for JJB config"
      file: path="/etc/jenkins_jobs" state=directory owner="jenkins" group="jenkins"

    - name: "copy the script to generate and save a Jenkins API key"
      action: template src=templates/jjb/configure.py dest="{{jenkins_home}}/jobs/configure.py"

    - stat: path="{{jenkins_home}}/config.xml"
      register: global_conf
    - name: "enable Unix PAM security for Jenkins"
      template: src=templates/config.xml dest="{{jenkins_home}}/config.xml"
      when: not global_conf.stat.exists

    - name: "Copy the initial JJB"
      copy: src="{{repo_path}}/jenkins/jjb/build.yaml" dest="{{jenkins_home}}/jobs/build.yaml" owner="jenkins" group="jenkins"

    - name: "generate an API token"
      shell: "python {{jenkins_home}}/jobs/configure.py"
      register: api_token

    - name: "save the generated API token"
      action: template src=templates/user.xml dest="{{jenkins_home}}/users/jenkins/config.xml" owner="jenkins" group="jenkins"

    - service: name=jenkins state=restarted

    - name: "wait until the Jenkins API is available"
      shell: curl --head --silent {{ jenkins_url }}{{ jenkins_prefix }}/cli/
      delay: 10
      retries: 12
      register: result
      until: result.stdout.find("200 OK") != -1

    - name: "update JJB"
      shell: jenkins-jobs update "{{jenkins_home}}/jobs"
